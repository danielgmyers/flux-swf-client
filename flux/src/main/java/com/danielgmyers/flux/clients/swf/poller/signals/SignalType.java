/*
 *   Copyright Flux Contributors
 *
 *   Licensed under the Apache License, Version 2.0 (the "License").
 *   You may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

package com.danielgmyers.flux.clients.swf.poller.signals;

/**
 * The supported types of signals. Each signal expects specific input fields, in a json blob.
 * For all signal types, if one of the required inputs is invalid, the signal will be ignored.
 * Note that nothing special needs to be done for partitioned steps, since an activity id uniquely identifies a specific
 * attempt of a specific partition of the step.
 *
 * SWF's SignalName field on the SignalWorkflowExecution API should match one of these signal types.
 *
 * DelayRetry:
 *     Tells Flux to reschedule an open retry timer to use a specified delay (starting from when the signal is processed).
 *     Note that this does not affect the exponential-backoff calculations for any retries following the delayed retry.
 *     Invalid delay values will cause this signal to be ignored.
 *     Expected input fields:
 *         - ActivityId - String - the id of the activity that should be delayed, e.g. WaitForNewInstances_3
 *         - Delay - number - the amount of time to delay, in seconds. Must be between 0 seconds and 24 hours (inclusive).
 *
 * ScheduleDelayedRetry:
 *     This is an internally-generated signal that tells Flux to schedule a retry of a previously cancelled timer.
 *     It's essentially a hack to work around SWF not letting you reuse a timer ID in the same decision that cancels the timer.
 *     It expects the same input fields as the DelayRetry signal.
 *     This signal should *not* be generated by anything outside of Flux's internal decision logic.
 *
 * RetryNow:
 *     Tells Flux to cancel an open retry timer and immediately retry the step.
 *     This is a convenience alias for DELAY_RETRY with a delay of 0 seconds.
 *     Expected input fields:
 *         - ActivityId - String - the id of the activity that should be retried immediately, e.g. WaitForNewInstances_3
 *
 * ForceResult:
 *     Tells Flux to cancel any open retry timers and treat the specified step as if it has exited with the specified result.
 *     Either a default result code ("_succeed" or "_fail") or a custom result code may be specified.
 *     Expected input fields:
 *         - ActivityId - String - the id of the activity that should be forced, e.g. WaitForNewInstances_3
 *         - ResultCode - String - the result code that should be used in the forced result.
 */
public enum SignalType {
    DELAY_RETRY("DelayRetry", DelayRetrySignalData.class),
    SCHEDULE_DELAYED_RETRY("ScheduleDelayedRetry", ScheduleDelayedRetrySignalData.class),
    RETRY_NOW("RetryNow", RetryNowSignalData.class),
    FORCE_RESULT("ForceResult", ForceResultSignalData.class);

    private final String friendlyName;
    private final Class<? extends BaseSignalData> signalDataType;

    SignalType(String friendlyName, Class<? extends BaseSignalData> signalDataType) {
        this.friendlyName = friendlyName;
        this.signalDataType = signalDataType;
    }

    public String getFriendlyName() {
        return friendlyName;
    }

    public Class<? extends BaseSignalData> getSignalDataType() {
        return signalDataType;
    }

    /**
     * Returns the SignalType value with a friendlyName matching the specified name, or null if none match.
     */
    public static SignalType fromFriendlyName(String name) {
        for (SignalType type : values()) {
            if (type.getFriendlyName().equalsIgnoreCase(name)) {
                return type;
            }
        }
        return null;
    }
}
